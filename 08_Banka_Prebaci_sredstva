using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using Banka;

namespace Testovi
{
    [TestClass]
    public class UnitTest1
    {
        //Ukoliko uz pomoć metode PrebaciSredstva prebacimo sa bankovnog računa „HR22“
        //na bankovni račun „HR33“ iznos od 15 000 kn, nastala transakcija bi trebala
        //pokazati da je naplaćeno 15 000 kn, a preostalo za naplatiti 0 kn.
        [TestMethod]
        public void Test1()
        {
            UpraviteljTransakcijama upravitelj = new UpraviteljTransakcijama();
            Assert.IsTrue(upravitelj.PrebaciSredstva("HR22", "HR33", 15000).Naplaceno == 15000 &&
                          upravitelj.PrebaciSredstva("HR22", "HR33", 15000).PreostaloNaplatiti == 0);
        }

        //Ukoliko uz pomoć metode PrebaciSredstva pokušamo prebaciti sa bankovnog
        //računa „HR66“ na bankovni račun „HR55“ iznos od 2 500 kn, nastala transakcija
        //bi trebala pokazati da je novo stanje računa izvorišnog računa 0 kn,
        //a stanje odredišnog računa 10 000 kn.

        [TestMethod]
        public void Test2()
        {
            UpraviteljTransakcijama upravitelj = new UpraviteljTransakcijama();
            Transakcija transakcija = upravitelj.PrebaciSredstva("HR66", "HR55", 2500);
            Assert.IsTrue(transakcija.Izvor.Stanje == 0 && transakcija.Odrediste.Stanje == 10000);
        }

        //Ukoliko uz pomoć metode PrebaciSredstva prebacimo sa bankovnog računa „HR22“
        //na bankovni račun „HR33“ iznos od 15 000 kn, nastala transakcija bi trebala
        //pokazati da je novo stanje računa izvorišnog računa 35 000 kn, a stanje
        //odredišnog računa 27 000 kn.
        //zas ne radi odrediste

        [TestMethod]
        public void Test3()
        {
            UpraviteljTransakcijama upravitelj = new UpraviteljTransakcijama();
            Transakcija transakcija = upravitelj.PrebaciSredstva("HR22", "HR33", 15000);
            Assert.IsTrue(transakcija.Izvor.Stanje == 35000 && transakcija.Odrediste.Stanje == 27000);
            
        }

        //Ukoliko pozovemo metodu PrebaciSredstva te joj proslijedimo IBAN nepostojećeg
        //izvorišnog računa, metoda baca iznimku InvalidBankAccountException.

        [TestMethod]
        [ExpectedException(typeof(InvalidBankAccountException))]
        public void Test4()
        {
            UpraviteljTransakcijama upravitelj = new UpraviteljTransakcijama();
            upravitelj.PrebaciSredstva("11", "HR22", 17000);
        }

        //Ukoliko pozovemo metodu PrebaciSredstva sa ispravnim IBAN-ovima
        //(npr. „HR22“ i „HR33“), ali proslijedimo nulu („0“) za iznos, metoda baca
        //iznimku InvalidAmountException.
        //izmjenjen kod

        [TestMethod]
        [ExpectedException(typeof(InvalidAmountException))]
        public void Test5()
        {
            UpraviteljTransakcijama upravitelj = new UpraviteljTransakcijama();
            upravitelj.PrebaciSredstva("HR22", "HR22", 0);
        }

        //Napišite test koji bi utvrdio ispravnost transakcije, odnosno njenih
        //vrijednosti Naplaceno i PreostaloNaplatiti u scenariju kada uz pomoć
        //metode PrebaciSredstva pokušamo prebaciti sa bankovnog računa „HR55“
        //na bankovni račun „HR66“ iznos od 10 000 kn. Imajte na umu nedovoljno
        //stanje na računu „HR55“, te da će metoda PrebaciSredstva naplatiti
        //onoliko koliko može a da bankovni račun ne ode u minus.

        [TestMethod]
        public void Test6()
        {
            UpraviteljTransakcijama upravitelj = new UpraviteljTransakcijama();
            upravitelj.PrebaciSredstva("HR55", "HR66", 10000);
            Assert.IsTrue(upravitelj.PrebaciSredstva("HR55", "HR66", 10000).PreostaloNaplatiti != 0);
        }

        //Ukoliko pozivom metodom OdobriMinus pokušamo odobriti minus nepostojećem
        //računu „HR01“, metoda baca iznimku InvalidBankAccountException
        //izmjenjen kod
        //nemam pojma

        
        [TestMethod]
        [ExpectedException(typeof(InvalidBankAccountException))]
        public void Test7()
        {
            UpraviteljTransakcijama upravitelj = new UpraviteljTransakcijama();
            upravitelj.OdobriMinus("HR01", 1000);
        }

        //Ukoliko uz pomoć metode PrebaciSredstva pokušamo prebaciti sa bankovnog računa
        //„HR66“ na isti bankovni račun „HR66“ iznos od 500 kn, metoda baca iznimku
        //InvalidBankAccountException

        [TestMethod]
        [ExpectedException(typeof(InvalidBankAccountException))]
        public void Test8()
        {
            UpraviteljTransakcijama upravitelj = new UpraviteljTransakcijama();
            upravitelj.PrebaciSredstva("HR66", "HR66", 500);
        }

        //Ukoliko uz pomoć metode PrebaciSredstva pokušamo prebaciti sa bankovnog računa
        //„HR66“ na bankovni račun „HR33“ iznos od 4 300 kn, a bankovni račun ima odobreni
        //minus = 2 000 kn, nastala transakcija bi trebala pokazati da je novo stanje
        //računa izvorišnog računa -2000 kn, stanje odredišnog računa 16 000 kn, da je
        //naplaćeno 4 000 kn, a preostalo za naplatiti 300 kn.
        //nije sve

        [TestMethod]
        public void Test9()
        {
            UpraviteljTransakcijama upravitelj = new UpraviteljTransakcijama();
            upravitelj.OdobriMinus("HR66", 2000);
            Transakcija transakcija = upravitelj.PrebaciSredstva("HR66", "HR33", 4300);
            
            Assert.IsTrue(transakcija.Izvor.Stanje == -2000 && transakcija.Odrediste.Stanje == 16000
                          && transakcija.Naplaceno == 4000 && transakcija.PreostaloNaplatiti == 300);
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Banka
{
    public class InvalidBankAccountException : ApplicationException
    {
        public InvalidBankAccountException()
        {

        }
    }

    public class InvalidAmountException : ApplicationException
    {
        public InvalidAmountException()
        {

        }
    }

    public class UpraviteljTransakcijama
    {
        private List<Racun> Racuni { get; set; }

        public UpraviteljTransakcijama()
        {
            Racuni = new List<Racun>();
            Racuni.Add(new Racun { IBAN = "HR11", Stanje = 100000 });
            Racuni.Add(new Racun { IBAN = "HR22", Stanje = 50000 });
            Racuni.Add(new Racun { IBAN = "HR33", Stanje = 12000 });
            Racuni.Add(new Racun { IBAN = "HR44", Stanje = 36000 });
            Racuni.Add(new Racun { IBAN = "HR55", Stanje = 8000 });
            Racuni.Add(new Racun { IBAN = "HR66", Stanje = 2000 });
        }

        public Transakcija PrebaciSredstva(string izvorIBAN, string odredisteIBAN, double iznos)
        {
            Racun izvor = Racuni.FirstOrDefault(r => r.IBAN == izvorIBAN);
            Racun odrediste = Racuni.FirstOrDefault(r => r.IBAN == odredisteIBAN);

            if (izvor == null || odrediste == null)
            {
                throw new InvalidBankAccountException();
            }

            //5
            if (iznos <= 0)
            {
                throw new InvalidAmountException();
            }

            //8
            if(izvor == odrediste)
            {
                throw new InvalidBankAccountException();
            }

            Transakcija t = new Transakcija();
            t.Izvor = izvor;
            t.Odrediste = odrediste;
            t.Iznos = iznos;

            if ((izvor.Stanje + izvor.OdobreniMinus) >= iznos)
            {
                t.Naplaceno = iznos;
            }
            else
            {
                t.Naplaceno = izvor.Stanje + izvor.OdobreniMinus;
                
            }
            t.PreostaloNaplatiti = t.Iznos - t.Naplaceno;

            izvor.Stanje = izvor.Stanje - t.Naplaceno;
            odrediste.Stanje = odrediste.Stanje + t.Naplaceno;

            return t;
        }

        public void OdobriMinus(string izvorIBAN, int odobreniMinus)
        {
            Racun r = Racuni.FirstOrDefault(x => x.IBAN == izvorIBAN);

            //7            
            if(r == null)
            {
                throw new InvalidBankAccountException();
            }

            if (r != null)
            {
                r.OdobreniMinus = odobreniMinus;
            }
        }
    }
}



