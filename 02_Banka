using Banka;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Testovi
{
    [TestClass]
    public class UpraviteljTransakcijamaTests
    {
        [TestMethod]
        [ExpectedException(typeof(InvalidBankAccountException))]
        public void Test1()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            banka.PrebaciSredstva("Nepostojeci", "HR11", 2000);
        }

        [TestMethod]
        [ExpectedException(typeof(InvalidAmountException))]
        public void Test2()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            banka.PrebaciSredstva("HR22", "HR11", 0);
        }

        [TestMethod]
        public void Test3()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            Assert.IsTrue(banka.PrebaciSredstva("HR11", "HR22", 30000).Izvor.Stanje == 70000);
        }

        [TestMethod]
        public void Test3_1()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();
            Assert.IsTrue(banka.PrebaciSredstva("HR11", "HR22", 30000).Odrediste.Stanje == 80000);
        }

        [TestMethod]
        public void Test4()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            Assert.IsTrue(banka.PrebaciSredstva("HR11", "HR22", 30000).Naplaceno == 30000 && banka.PrebaciSredstva("HR11", "HR22", 30000).PreostaloNaplatiti == 0);
        }

        [TestMethod]
        public void Test4_1()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            Assert.IsTrue(banka.PrebaciSredstva("HR11", "HR22", 30000).PreostaloNaplatiti == 0);
        }

        [TestMethod]
        public void Test5()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            Assert.IsTrue(banka.PrebaciSredstva("HR66", "HR55", 3500).Izvor.Stanje == 0 && banka.PrebaciSredstva("HR66", "HR55", 3500).Odrediste.Stanje == 10000);
        }

        [TestMethod]
        public void Test5_1()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            Assert.IsTrue(banka.PrebaciSredstva("HR66", "HR55", 3500).Odrediste.Stanje == 10000);
        }

        [TestMethod]
        public void Test6()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            Assert.IsTrue(banka.PrebaciSredstva("HR66", "HR55", 3500).PreostaloNaplatiti == 1500);
        }

        [TestMethod]
        public void Test6_1()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            Assert.IsTrue(banka.PrebaciSredstva("HR66", "HR55", 3500).Naplaceno == 2000);
        }

        [TestMethod]
        [ExpectedException(typeof(InvalidBankAccountException))]
        public void Test7()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            banka.OdobriMinus("HR123123", 100);
        }

        [TestMethod]
        public void Test8()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            banka.OdobriMinus("HR66", 2000);

            Assert.IsTrue(banka.PrebaciSredstva("HR66", "HR55", 3500).Izvor.Stanje == -1500);
        }

        [TestMethod]
        public void Test8_1()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            banka.OdobriMinus("HR66", 2000);

            Assert.IsTrue(banka.PrebaciSredstva("HR66", "HR55", 3500).Odrediste.Stanje == 11500);
        }

        [TestMethod]
        public void Test9()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            banka.OdobriMinus("HR66", 2000);

            Assert.IsTrue(banka.PrebaciSredstva("HR66", "HR55", 4500).Izvor.Stanje == -2000 && banka.PrebaciSredstva("HR66", "HR55", 4500).Odrediste.Stanje == 12000);
        }

        [TestMethod]
        public void Test9_1()
        {
            UpraviteljTransakcijama banka = new UpraviteljTransakcijama();

            banka.OdobriMinus("HR66", 2000);

            Assert.IsTrue(banka.PrebaciSredstva("HR66", "HR55", 4500).Naplaceno == 4000);
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Banka
{
    public class InvalidBankAccountException : ApplicationException
    {
        public InvalidBankAccountException()
        {

        }
    }

    public class InvalidAmountException : ApplicationException
    {
        public InvalidAmountException()
        {

        }
    }

    public class UpraviteljTransakcijama
    {
        public List<Racun> Racuni { get; set; }

        public UpraviteljTransakcijama()
        {
            Racuni = new List<Racun>();
            Racuni.Add(new Racun { IBAN = "HR11", Stanje = 100000 });
            Racuni.Add(new Racun { IBAN = "HR22", Stanje = 50000 });
            Racuni.Add(new Racun { IBAN = "HR33", Stanje = 12000 });
            Racuni.Add(new Racun { IBAN = "HR44", Stanje = 36000 });
            Racuni.Add(new Racun { IBAN = "HR55", Stanje = 8000 });
            Racuni.Add(new Racun { IBAN = "HR66", Stanje = 2000 });
        }

        public Transakcija PrebaciSredstva(string izvorIBAN, string odredisteIBAN, double iznos)
        {
            Racun izvor = Racuni.FirstOrDefault(r => r.IBAN == izvorIBAN);
            Racun odrediste = Racuni.FirstOrDefault(r => r.IBAN == odredisteIBAN);

            if (izvor == null || odrediste == null)
            {
                throw new InvalidBankAccountException();
            }

            if (iznos <= 0)
            {
                throw new InvalidAmountException();
            }

            Transakcija t = new Transakcija();
            t.Izvor = izvor;
            t.Odrediste = odrediste;
            t.Iznos = iznos;

            if (iznos > (izvor.OdobriMinus + izvor.Stanje))
            {
                t.Naplaceno = izvor.OdobriMinus + izvor.Stanje;
            }
            else if (izvor.OdobriMinus != 0)
            {
                t.Naplaceno = iznos + t.PreostaloNaplatiti;
            }
            else if (izvor.Stanje >= iznos)
            {
                t.Naplaceno = iznos;
            }
            else
            {
                t.Naplaceno = izvor.Stanje;
            }
            
            t.PreostaloNaplatiti = t.Iznos - t.Naplaceno;

            izvor.Stanje = izvor.Stanje - t.Naplaceno;
            odrediste.Stanje = odrediste.Stanje + t.Naplaceno;

            return t;
        }

        public void OdobriMinus(string izvorIBAN, double OdobreniMinus)
        {
            Racun izvor = Racuni.FirstOrDefault(r => r.IBAN == izvorIBAN);
            int index = Racuni.FindIndex(f => f.IBAN == izvorIBAN);
            if (index >= 0)
            {
                izvor.OdobriMinus = OdobreniMinus;
            }
            else
            {
                throw new InvalidBankAccountException();
            }
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Banka
{
    public class Racun
    {
        public string IBAN { get; set; }
        public double Stanje { get; set; }
        public double OdobriMinus { get; set; } = 0;
    }
}
