using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using Prijava;

namespace Testovi
{
    [TestClass]
    public class AutentifikatorTests
    {
        [TestMethod]
        public void Test1()
        {
            Autentifikator autentifikator = new Autentifikator();
            Korisnik korisnik = new Korisnik();

            autentifikator.PrijaviKorisnika("pivic", "12345");

            Assert.IsNotNull(autentifikator.PrijavljeniKorisnik);
            Assert.IsTrue(autentifikator.PrijavljeniKorisnik.KorisnickoIme.Equals("pivic"));
        }

        [TestMethod]
        public void Test2()
        {
            Autentifikator autentifikator = new Autentifikator();

            autentifikator.PrijaviKorisnika("", "");

            Assert.IsNotNull(autentifikator.PrijavljeniKorisnik);
            Assert.IsTrue(autentifikator.PrijavljeniKorisnik.Tip == TipKorisnika.Gost);
        }
        [TestMethod]
        [ExpectedException(typeof(FailedAuthenticationException))]
        public void Test3()
        {
            Autentifikator autentifikator = new Autentifikator();

            autentifikator.PrijaviKorisnika("mmijac", "ab234");
        }

        [TestMethod]
        public void Test4()
        {
            Autentifikator autentifikator = new Autentifikator();

            autentifikator.PrijaviKorisnika("mmijac", "abcde");

            autentifikator.OdjaviKorisnika();

            Assert.IsNull(autentifikator.PrijavljeniKorisnik);
        }

        [TestMethod]
        [ExpectedException(typeof(InvalidOperationException))]
        public void Test5()
        {
            Autentifikator autentifikator = new Autentifikator();

            autentifikator.PrijaviKorisnika("mmijac", "abcde");

            autentifikator.PrijaviKorisnika("pivic", "12345");
        }

        [TestMethod]
        public void Test6()
        {
            Autentifikator autentifikator = new Autentifikator();

            autentifikator.PrijaviKorisnika();

            Assert.IsTrue(autentifikator.PrijavljeniKorisnik != null && autentifikator.PrijavljeniKorisnik.Tip == TipKorisnika.Gost);
        }

        [TestMethod]
        [ExpectedException (typeof(InvalidOperationException))]
        public void Test7()
        {
            Autentifikator autentifikator = new Autentifikator();

            autentifikator.OdjaviKorisnika();
        }

        [TestMethod]
        [ExpectedException(typeof(InvalidOperationException))]
        public void Test8()
        {
            Autentifikator autentifikator = new Autentifikator();

            autentifikator.PrijaviKorisnika("valic", "ab234");

            autentifikator.DektivirajKorisnika("pivic");
        }

        [TestMethod]
        [ExpectedException(typeof(UserDeactivatedException))]
        public void Test9()
        {
            Autentifikator autentifikator = new Autentifikator();

            autentifikator.PrijaviKorisnika("mmijac", "abcde");

            autentifikator.DektivirajKorisnika("pivic");

            autentifikator.OdjaviKorisnika();

            autentifikator.PrijaviKorisnika("pivic", "12345");
        }
    }
}



Izmjene u PrijaviKorisnika()

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Prijava
{
    public class FailedAuthenticationException : ApplicationException
    {
        public FailedAuthenticationException(string message)
            :base(message)
        {

        }
    }

    public class UserDeactivatedException : ApplicationException
    {
        public UserDeactivatedException(string message) : base(message)
        {

        }
    }

    public class Autentifikator
    {
        private List<Korisnik> Korisnici { get; set; }
        public Korisnik PrijavljeniKorisnik { get; private set; }

        public Autentifikator()
        {
            Korisnici = new List<Korisnik>();

            Korisnici.Add(new Korisnik { KorisnickoIme = "mmijac", Lozinka="abcde", Tip = TipKorisnika.Administrator });
            Korisnici.Add(new Korisnik { KorisnickoIme = "pivic", Lozinka = "12345", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "valic", Lozinka = "ab234", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "anovak", Lozinka = "qetzs", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "thorvat", Lozinka = "hfdrz", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "gtudor", Lozinka = "nrtgs", Tip = TipKorisnika.Obicni });
            Korisnici.Add(new Korisnik { KorisnickoIme = "btomas", Lozinka = "kgdrt", Tip = TipKorisnika.Administrator });
            Korisnici.Add(new Korisnik { KorisnickoIme = "gost", Lozinka = "gost", Tip = TipKorisnika.Gost });
        }

        

        public void PrijaviKorisnika(string korisnickoIme, string lozinka)
        {
            Korisnik korisnik = new Korisnik();

            if (PrijavljeniKorisnik != null)
            {
                throw new InvalidOperationException();
            }
            var korisnikDe = Korisnici.FirstOrDefault(k => k.KorisnickoIme == korisnickoIme);
            if (korisnikDe.Active == false)
            {
                throw new UserDeactivatedException("Deaktiviran.");
            }

            if (korisnickoIme != "" && lozinka != "")
            {
                PrijavljeniKorisnik = Korisnici.FirstOrDefault(k => k.KorisnickoIme == korisnickoIme && k.Lozinka == lozinka);
                if (PrijavljeniKorisnik == null)
                {
                    throw new FailedAuthenticationException("Neispravni podaci!");
                }
            }
            else if (korisnickoIme == "" && lozinka == "")
            {
                korisnik.KorisnickoIme = "";
                korisnik.Lozinka = "";
                korisnik.Tip = TipKorisnika.Gost;
                //Korisnici.Add(korisnik);
                PrijavljeniKorisnik = korisnik;
                //PrijavljeniKorisnik = Korisnici.FirstOrDefault(k => k.KorisnickoIme == korisnickoIme && k.Lozinka == lozinka && k.Tip == TipKorisnika.Gost);
            }
        }

        public void PrijaviKorisnika()
        {
            PrijaviKorisnika("gost", "gost");
        }

        public void OdjaviKorisnika()
        {
            if (PrijavljeniKorisnik != null)
            {
                PrijavljeniKorisnik = null;
            }
            else
            {
                throw new InvalidOperationException("Odjava je moguÄ‡a samo ukoliko je korisnik prijavljen!");
            }
        }

        public void DektivirajKorisnika(string korisnickoIme)
        {
            if (PrijavljeniKorisnik == null || PrijavljeniKorisnik.Tip != TipKorisnika.Administrator)
            {
                throw new InvalidOperationException();
            }

            var korisnik = Korisnici.FirstOrDefault(k => k.KorisnickoIme == korisnickoIme);
            if (korisnik != null)
            {
                korisnik.Active = false;
            }
        }
    }
}
